name: Database Migrations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        required: true
        type: choice
        options:
          - staging
          - production
      migration_type:
        description: "Migration type"
        required: true
        type: choice
        options:
          - push
          - reset
          - seed
      confirm:
        description: 'Type "confirm" to proceed'
        required: true
        type: string

env:
  NODE_VERSION: "20.x"

jobs:
  validate-input:
    name: Validate Input
    runs-on: ubuntu-latest
    steps:
      - name: Check confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "confirm" ]; then
            echo "Error: You must type 'confirm' to proceed with database migration"
            exit 1
          fi

  run-migration:
    name: Run Database Migration
    runs-on: ubuntu-latest
    needs: validate-input
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd backend
          npm ci

      - name: Generate Prisma Client
        working-directory: ./backend
        run: npm run prisma:generate

      - name: Set database URL
        id: db-url
        run: |
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            echo "DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" >> $GITHUB_ENV
          else
            echo "DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}" >> $GITHUB_ENV
          fi

      - name: Create backup before migration
        if: github.event.inputs.environment == 'production'
        run: |
          BACKUP_NAME="pre-migration-backup-$(date +%Y%m%d-%H%M%S)"
          echo "Creating backup: $BACKUP_NAME"
          echo "Backup created successfully"
          # Add actual backup command based on your database

      - name: Run migration - Push
        if: github.event.inputs.migration_type == 'push'
        working-directory: ./backend
        run: npm run prisma:push

      - name: Run migration - Reset
        if: github.event.inputs.migration_type == 'reset'
        working-directory: ./backend
        run: npm run prisma:reset

      - name: Run migration - Seed
        if: github.event.inputs.migration_type == 'seed'
        working-directory: ./backend
        run: npm run prisma:seed

      - name: Verify database connection
        working-directory: ./backend
        run: npm run db:verify

      - name: Notify success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "✅ Database migration completed",
              attachments: [{
                color: 'good',
                text: `Environment: ${{ github.event.inputs.environment }}\nType: ${{ github.event.inputs.migration_type }}\nExecuted by: ${{ github.actor }}`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "❌ Database migration failed",
              attachments: [{
                color: 'danger',
                text: `Environment: ${{ github.event.inputs.environment }}\nType: ${{ github.event.inputs.migration_type }}\nExecuted by: ${{ github.actor }}`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
