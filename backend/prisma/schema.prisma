// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  email             String    @unique
  passwordHash      String?
  emailVerified     Boolean   @default(false)
  twoFactorEnabled  Boolean   @default(false)
  twoFactorSecret   String?
  oauthProvider     String?
  oauthId           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  subscription      Subscription?
  ownedProjects     Project[]
  projectMembers    ProjectMember[]
  apiKeys           ApiKey[]
  auditLogs         AuditLog[]
  variableVersions  VariableVersion[]

  @@map("users")
}

model Subscription {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  userId              String   @unique @db.ObjectId
  plan                String   // 'free' | 'pro' | 'team' | 'enterprise'
  status              String   // 'active' | 'canceled' | 'past_due'
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  ownerId     String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner       User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  environments Environment[]
  connections PlatformConnection[]
  webhooks    WebhookConfig[]

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId String   @db.ObjectId
  userId    String   @db.ObjectId
  role      String   // 'viewer' | 'developer' | 'admin' | 'owner'
  createdAt DateTime @default(now())

  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model Environment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId String   @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  variables Variable[]
  syncLogs  SyncLog[]

  @@unique([projectId, name])
  @@map("environments")
}

model Variable {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  environmentId         String    @db.ObjectId
  key                   String
  value                 String    // Encrypted if isSecret
  encryptedDek          String?   // Data encryption key (encrypted by KEK)
  isSecret              Boolean   @default(false)
  rotationEnabled       Boolean   @default(false)
  rotationIntervalDays  Int?
  nextRotationAt        DateTime?
  createdBy             String    @db.ObjectId
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  deletedAt             DateTime?

  environment           Environment        @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  versions              VariableVersion[]

  @@unique([environmentId, key])
  @@index([environmentId])
  @@index([deletedAt])
  @@map("variables")
}

model VariableVersion {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  variableId   String   @db.ObjectId
  value        String
  encryptedDek String?
  changeType   String   // 'created' | 'updated' | 'deleted' | 'rollback'
  changedBy    String   @db.ObjectId
  createdAt    DateTime @default(now())

  variable     Variable @relation(fields: [variableId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [changedBy], references: [id])

  @@index([variableId])
  @@map("variable_versions")
}

model PlatformConnection {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  projectId      String    @db.ObjectId
  platform       String    // 'vercel' | 'aws-ssm' | 'aws-secrets-manager' | 'netlify' | 'heroku'
  credentials    String    // Encrypted
  encryptedDek   String
  targetResource String
  lastSyncAt     DateTime?
  status         String    @default("connected") // 'connected' | 'error'
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  project        Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  syncLogs       SyncLog[]

  @@map("platform_connections")
}

model SyncLog {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  connectionId String   @db.ObjectId
  environmentId String  @db.ObjectId
  success      Boolean
  syncedCount  Int?
  errorMessage String?
  createdAt    DateTime @default(now())

  connection   PlatformConnection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  environment  Environment        @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@map("sync_logs")
}

model AuditLog {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String?  @db.ObjectId
  action       String
  resourceType String
  resourceId   String?
  metadata     Json?
  ipAddress    String?
  userAgent    String?
  severity     String   @default("info") // 'info' | 'warning' | 'critical'
  createdAt    DateTime @default(now())

  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([createdAt])
  @@index([resourceType, resourceId])
  @@map("audit_logs")
}

model ApiKey {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  name       String
  keyHash    String
  scopes     Json?     // Array of allowed scopes
  lastUsedAt DateTime?
  expiresAt  DateTime?
  createdAt  DateTime  @default(now())

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model WebhookConfig {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId String   @db.ObjectId
  url       String
  events    Json     // Array of event types to trigger webhook
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("webhook_configs")
}

model RotationLog {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  variableId   String   @db.ObjectId
  status       String   // 'success' | 'failed' | 'pending'
  errorMessage String?
  rotatedBy    String?  // 'system' | userId
  createdAt    DateTime @default(now())

  @@index([variableId])
  @@index([createdAt])
  @@map("rotation_logs")
}
